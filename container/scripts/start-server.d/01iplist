#!/bin/bash
#
# 01-iplist - Discover IP's we could use for this server
#
# Author: Lord Kator <lordkator@swgemu.com>
#
# Created: Sat Jan 16 10:37:28 EST 2016
#
# Depends: OPENRESTY_PORT
#
# NOTE: We run this in the background to give it a head start before the devsetup needs the list
#

[ -n "$OPENRESTY_PORT" ] || error "Missing OPENRESTY_PORT configuration" 101

update_iplist() {
  # Simple lock so others can see if it's done later
  zdcfg set-flag iplist.lock

  # All of this in the background...
  (
    ###########
    ## CHILD ##
    ###########
    SECONDS=0

    # Clear lock when we're done...
    trap 'zdcfg clear-flag iplist.lock' 0

    zdcfg clear iplist

    local pub_ip=$(dig @ns1.google.com -t txt o-o.myaddr.l.google.com +short | tr -d '"')

    if [ -z "$pub_ip" ]; then
	echo "** ERROR: Failed to find public ip, aborting."
	exit 1
    fi

    echo "** Public IP: ${pub_ip}"

    local pub_rev=$(dig +short -x ${pub_ip})

    if [ -n "$pub_rev" ]; then
	pub_rev=" (${pub_rev})"
    fi

    zdcfg set iplist "${pub_ip},Public Internet IP${pub_rev}"

    local default_route=$(ip -o -4 route show|egrep '^default')

    read j j default_route_ip j default_route_interface <<<${default_route}

    local guess_lan_router=${default_route_ip}

    # By default eth0 is NAT, if we found a different default route interface just assume it's the LAN
    if [ "${default_route_interface}" != "eth0" ]; then
	echo "** Default Route ${default_route_ip} is on ${default_route_interface}, assuming LAN is ${guess_lan_router}"
    else
	echo "** Default Route: ${default_route}"

	# Since ETH0 should be NAT we need to do some tricks to find LAN using traceroute

	echo "** Default Route IP: ${default_route_ip}"

	IFS='.' read -ra t <<<${default_route_ip}

	# Just guessing it's a class B most of the time
	local regex="${t[0]}\.${t[1]}\.${t[2]}\.*"

	echo -ne "** Searching for Local Area Network past VM's NAT (${regex})"

	# Find first ip just after our VM's NAT (again quick and dirty guess)
	guess_lan_router=$(sudo traceroute -I -nw 2 -q 2 -m 10 www.cisco.com | perl -ne 'push(@a,(split)[1]); END { while(shift(@a)) { if($a[0] =~ /^10\.0\.2\./) { print($a[1] . "\n"); exit(0); } } }')

	if [ -z "${guess_lan_router}" ]; then
	    echo -e "\n** ERROR: Can't determine LAN router IP. Traceroute ICMP might be blocked."
	    exit 1
	fi

	echo -e "\n** Found Lan Router: ${guess_lan_router}"
    fi

    echo "** Checking to see if zonama-instance-id service is running up"

    # A unique id so we can see these across multiple logs etc.
    local scan_token=$(date|md5sum|cut -d' ' -f1)

    local our_instance=$(get_instance "${scan_token}")

    if [ -z "${our_instance}" ]; then
	echo "** failed to find our instance!"
	exit 1
    fi

    echo "** Our instance ID: ${our_instance}"

    # Typical home network
    IFS='.' read -ra t <<<${guess_lan_router}
    local subnet="${t[0]}.${t[1]}.${t[2]}."
    local lan_ip=''

    # Maybe we can find outselves right on our own interface!
    if [ "${default_route_interface}" != "eth0" ]; then
	# Maybe we're already here!
	read -a aa <<<$(ip -o -4 addr show ${default_route_interface})
	local tmp_ip=$(echo ${aa[3]}|cut -d/ -f1)

	local result=$(curl -s -A zonamaipscan --connect-timeout 1 -m 1 'http://'${tmp_ip}':'${OPENRESTY_PORT}'/zonama-instance-id?scantoken='$scan_token 2>/dev/null)

	if [ "X$result" = "X$our_instance" ]; then
	    echo "** Look 'ma no hands, found ourselves on ${default_route_interface} at ${tmp_ip}"
	    lan_ip=${tmp_ip}
	else
	    echo "** WARNING: Default route interface is ${default_route_interface} with ip ${tmp_ip}, but we didn't find our zonama-instance-id service?"
	fi
    fi

    # If not then we need to scan the subnet
    if [ -z "${lan_ip}" ]; then
	echo "** Scanning to find ourselves on the lan (${subnet}).."

	for i in {1..254}
	do
	    # echo -ne "\r$i\t"
	    local addr="${subnet}${i}"
	    local result=$(curl -s -A zonamaipscan --connect-timeout 0.03 -m 0.03 'http://'${addr}':'${OPENRESTY_PORT}'/zonama-instance-id?scantoken='$scan_token 2>/dev/null)

	    if [ "X$result" = "X$our_instance" ]; then
		# TODO do we need to double check nginx log local just in case?
		lan_ip=$addr
		break
	    fi
	done

	echo "** Scan completed after $SECONDS second(s)"
    fi

    if [ -z "${lan_ip}" ]; then
	echo "** Failed to find LAN IP"
    else
	echo "** Local Network IP: ${lan_ip}"

	zdcfg set iplist "${pub_ip},Public Internet IP${pub_rev}\n${lan_ip},Local Network IP"

	step_complete 0 "seconds=$SECONDS"
    fi

    exit 0
  ) < /dev/null > /tmp/iplist.out 2>&1 &

  ############
  ## PARENT ##
  ############
  msg "Updating IP list in background..."
}

get_instance() {
    local scan_token=$1

    read -a instance_query <<<$(curl -s -D - -A zonamaipscan --connect-timeout 5 -m 5 'http://127.0.0.1:'${OPENRESTY_PORT}'/zonama-instance-id?scantoken='$scan_token 2> /dev/null)
    for i in 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1
    do
	read -a instance_query <<<$(curl -s -D - -A zonamaipscan --connect-timeout 5 -m 5 'http://127.0.0.1:'${OPENRESTY_PORT}'/zonama-instance-id?scantoken='$scan_token 2> /dev/null)

	if [ "${instance_query[1]}" = "200" ]; then
	    echo "** Found zonama-instance-id service on localhost." >&2
	    break
	fi

	echo "** Waiting $i seconds for nginx zonama-instance-id service to start" >&2
	sleep 1
    done

    if [ "${instance_query[1]}" != "200" ]; then
	echo "** ERROR: Local zonama-instance-id service is not running on port ${OPENRESTY_PORT} as expected, giving up." >&2
	return 1
    fi

    echo "${instance_query[${#instance_query[@]}-1]}"

    return 0
}

check_ip() {
    msg "Validate server ip"

    if zdcfg check-flag disable_ipcheck; then
	echo '** Skipping ipcheck because flag disable_ipcheck is on **'
	return 0
    fi

    local scan_token=$(date|md5sum|cut -d' ' -f1)
    local our_instance=$(get_instance "${scan_token}")
    local server_ip=$(zdcfg get server_ip)

    if [ -z "${server_ip}" ]; then
	echo "server_ip not set, check_ip skipped"
	return 0
    fi

    # If we can we should try and get ports forwarded before we test...
    if zdcfg check-flag enable_upnp && [ -x ${ZDHOME}/bin/upnp_add_ports ]; then
	msg "Check for upnpclient"
	if [ -z "$(luarocks list 2> /dev/null | grep upnpclient)" ]; then
	    sudo luarocks install upnpclient
	fi
	msg "START upnp_add_ports"
	${ZDHOME}/bin/upnp_add_ports
	msg "END upnp_add_ports, RET=$?"
    fi

    # Try SSL first
    local scheme='https'
    local result=$(curl -s -A zonamaipscan --insecure --connect-timeout 5 -m 5 ${scheme}'://'${server_ip}':'${OPENRESTY_SSL_PORT}'/zonama-instance-id?scantoken='$scan_token 2>/dev/null)

    # If that fails fall back to HTTP
    if [ -z "$result" ]; then
	scheme='http'
	echo "** https Failed trying ${scheme}"
        result=$(curl -s -A zonamaipscan --connect-timeout 5 -m 5 ${scheme}'://'${server_ip}':'${OPENRESTY_PORT}'/zonama-instance-id?scantoken='$scan_token 2>/dev/null)
    fi

    if [ "X$result" = "X$our_instance" ]; then
	echo "** Found ourselves at server_ip (${scheme}://${server_ip}/)"
        return 0
    fi

    alert "Invalid Server IP" "Server IP was ${server_ip}, but it does not appear to be valid anymore.\nRe-running IP setup."
    return 1
}

IPLIST=$(zdcfg get iplist 2> /dev/null)

if $FORCE; then
    zdcfg clear iplist
    IPLIST=''
fi

if check_ip; then
    :
else
    msg "Invalid server_ip, reset and re-scan"
    zdcfg clear server_ip
    zdcfg clear iplist
    IPLIST=''
fi

if [ -z "$IPLIST" ]; then
    update_iplist 
fi
