#!/bin/bash
#
# swgemu - Control swgemu server on this machine
#
# Author: Lord Kator <lordkator@swgemu.com>
#
# Created: Sun Jan  3 13:30:33 UTC 2016
#

source ~/ZonamaDev/common/global.config

BUILD_LOG=${BUILD_DIR}/build.out
IS_PANEL=false
IS_API_CALL=false

main() {
    local ret=255
    local cmd=$(echo $1 | tr '[:upper:]' '[:lower:]')
    shift

    if is_setup_pending "$cmd"; then
        return 251
    fi

    if get_lock; then
        :
    else
        return 252
    fi

    case $cmd in
        'backup' )       server_backup       "$@";;
        'build' )        server_build        "$@";;
        'latest' )       server_latest       "$@";;
        'postdebug' )    post_debug          "$@";;
        'send' )         server_send         "$@";;
        'restore' )      server_restore      "$@";;
        'rununittests' ) server_rununittests "$@";;
        'start' )        server_start        "$@";;
        'status' )       server_status       "$@";;
        'stop' )         server_stop         "$@";;
        'reset_ip' | 'resetip' | 'reset-ip' )    reset_server_ip "$@";;
        'version' )      show_version        "$@";;
        'help' | * ) echo "Usage: $0 [backup|build|postdebug|latest|send|restore|runUnitTests|start|status|stop|reset_ip|version]"; return 1 ;;
    esac

    ret=$?

    release_lock

    return $ret
}

ICON=${ZDHOME}/ZonamaDev/fasttrack/assets/swgemu_icon.png

server_start() {
    local autostart=false

    if [ "X$1" = "X--auto" ]; then
        autostart=true
    fi

    if server_status -q; then
        echo "** Already running **"
        if $autostart; then
            return 0
        fi

        if yorn "Would you like to stop the sever?"; then
            echo "** stopped server first **"
            server_stop
        else
            release_lock
            exec screen -D -RR swgemu-server
        fi
        return 0
    fi

    if tre_check; then
        :
    else
        echo
        echo "************************************************************************"
        echo "**                                                                    **"
        echo "** You need to copy the original game .tre files in to the guest.     **"
        echo "**                                                                    **"
        echo "** On the host from your ZonamaDev/fasttrack server try this command: **"
        echo "**                                                                    **"
        echo "**    ./tre.sh                                                        **"
        echo "**                                                                    **"
        echo "** From inside of a Git Bash window.                                  **"
        echo "**                                                                    **"
        echo "************************************************************************"
        echo
        return 13
    fi

    server_update_ip

    cd "${RUN_DIR}"

    if [ ! -x core3 ]; then
        echo "** Server not built? **"

        if $autostart; then
            echo "** Can't auto-start server unless it's built already"
            return 3
        fi

        if yorn "Would you like to build the server now?"; then
            if server_build; then
                :
            else
                return $?
            fi
        else
            echo "** USER ABORTED **"
            return 2
        fi
    fi

    for i in 5 4 3 2 1
    do
        let "j=$i-1"
        mv o_screenlog.${j}.gz o_screenlog.${i}.gz 2> /dev/null
    done

    mv screenlog.0 o_screenlog.0

    gzip -f o_screenlog.0 &

    if [ ! -f ~/.screenrc ]; then
        echo 'logfile flush 2' > ~/.screenrc
    fi

    # Start server detached
    screen -dmS swgemu-server -L gdb --command=$HOME/bin/gdb_settings ./core3

    if $autostart; then
        echo "** server started **"
        return 0
    fi

    # Free lock
    release_lock

    # TODO Spawn a watcher to alert when the server is up
    sentinel --stop-at-init &

    # Join the session so they can watch along..
    exec screen -D -RR swgemu-server
}

server_status() {
    local pid=$(pgrep core3)
    local verbose=true

    if [ "X$1" = "X-q" ]; then
        verbose=false
    fi

    if [ -z "$pid" ]; then
        if $verbose; then
            echo "Server is not running"
        fi
        return 1
    fi

    local state=$(ps -p $pid -ho state)

    shopt -s nocasematch

    if [[ "${state}" != "S" && "${state}" != "R" && "${state}" != "D" ]]; then
        echo -e $(tput setab 3;tput setaf 0)"WARNING: Server state is ${state}, it is not running or sleeping, something is wrong!"$(tput sgr0)

        if $verbose; then
            return 2
        fi
    fi

    if $verbose; then
        read uptime <<< $(ps -p $pid -ho etime)

        echo "Server running on $pid, uptime: $uptime"
    fi

    return 0
}

server_send() {
    if server_status -q; then
        :
    else
        echo "** Server not running **"
        return 0
    fi

    cd ${RUN_DIR}

    if [ "X$1" = "X--auto" ]; then
        shift
    fi

    local string="$*^M"

    local sz=$(stat -c '%s' screenlog.0)

    screen -S swgemu-server -X stuff "$string"

    sentinel --stop-next-prompt --tail --seek $sz

    return 1
}

server_stop() {
    if server_status -q; then
        :
    else
        echo "** Server not running **"
        return 0
    fi

    cd "${RUN_DIR}"

    if [ ! -f "screenlog.0" ]; then
        echo "** screenlog is missing, did you run the server from $0?"
        return 1
    fi

    local sz=$(stat -c '%s' screenlog.0)
    local pid=$(pgrep core3)
    local state=$(ps -p $pid -ho state)
    local ppid=$(ps -p $pid -ho ppid)
    local pcmd=$(ps -p $ppid -ho cmd)
    local gdb=false

    if [[ $pcmd =~ ^gdb ]]; then
        gdb=true
        echo "** running under gdb **"
    fi

    echo "** send 'save' command to server **"

    # Just in case don't compare case
    shopt -s nocasematch

    if [[ "${state}" == "S" || "${state}" == "R" || "${state}" == "D" ]]; then
        screen -S swgemu-server -X stuff "save^M"

        # TODO add timeout?
        if sentinel --stop-next-backup --seek $sz; then
            echo "** server backup complete **"
        else
            echo "** sentinel failed with err=$?"
        fi
    else
        echo -e $(tput setab 3;tput setaf 0)"WARNING: Server state is ${state}, it is not running or sleeping, something is wrong!"$(tput sgr0)
    fi

    echo -n "** sending SIGINT to core3($pid).."

    if $gdb; then
        echo -n ". State: "
    fi

    kill -INT $pid

    for i in 10 9 8 7 6 5 4 3 2 1
    do
        if pgrep core3 > /dev/null 2>&1; then
            if $gdb; then
                # Look for state 't'
                local state=$(ps -p $pid -ho state)
                echo -n $state

                if [[ "${state}" == "t" || "${state}" == "T" || "${state}" == "Z" ]]; then
                    echo -en "\n** killing gdb($ppid) **"
                    kill $ppid
                    sleep 2
                    if kill -0 $ppid 2> /dev/null; then
                        echo "** killing gdb($ppid) with SIGKILL **"
                        kill -KILL $ppid
                    fi
                    break
                fi
            else
                echo -n "."
            fi
            sleep 1
        fi
    done

    if pgrep core3 > /dev/null 2>&1; then
        echo "** WARNING: Server is still up, sending KILL **"
        kill -KILL $pid
        if $gdb; then
            if kill -0 $ppid 2> /dev/null; then
                echo "** WARNING: killing gdb($ppid) with SIGKILL **"
                kill -KILL $ppid
            fi
        fi
    fi

    if pgrep core3 > /dev/null 2>&1; then
        echo "** WARNING: Unable to stop server! pid=$pid **"
        return 1
    else
        echo -e $(tput setaf 2)"\n** server stopped **"$(tput sgr0)

        echo -e "\n** "$(date)" SERVER SHUTDOWN BY swgemu COMMAND. **\n" >> screenlog.0
    fi

    return 0
}

server_build_step() {
    cd ${BUILD_DIR}

    if [ ! -f "${WORKSPACE}/Initial_Core3_Build.log" ]; then
	BUILD_LOG="${WORKSPACE}/Initial_Core3_Build.log"
    fi

    if [ -f "${BUILD_LOG}" ]; then
        mv "${BUILD_LOG}" "${BUILD_LOG}.prev"
    fi

    local build_status_file=$(mktemp /tmp/swgemu-build-status.XXXXXX)

    echo 254 > ${build_status_file}

    echo "Logging to ${BUILD_LOG}"

    (
        if [ -n "$#" ]; then
	    echo make -k $@
	    make -k $@
	fi

        export MAKE=$(type -P make)' -j'$(nproc)

	echo time $MAKE -k build

	time $MAKE -k build 2>&1

	echo $? > ${build_status_file}
    ) | tee "${BUILD_LOG}"

    local status=$(cat $build_status_file)

    rm -f "${build_status_file}"

    return $status
}

server_build() {
    if server_status; then
        echo "** Server is running **"

        if yorn "Would you like to join the console so you can shut it down?"; then
            screen -D -RR swgemu-server
        else
            echo "** USER ABORTED BUILD **"
            return 12
        fi
    fi

    cd "${BUILD_DIR}"

    local extra=""

    local bdb_ver=$(sed -ne '/.*-ldb-\([0-9.]*\).*/s//\1/p' src/Makefile.am)

    if [ "X${bdb_ver}" != 'X5.0' ]; then
	if dpkg -s libdb5.3-dev > /dev/null 2>&1; then
	    :
	else
	    echo
	    echo "##########################################"
	    echo "## AUTO-UPGRADING YOUR BDB TO BDB 5.3.x ##"
	    echo "##########################################"
	    echo
	    sudo apt-get install -y libdb5.3-dev
	    rm -f build/unix/config.log
	    extra='clean '
	fi
    fi

    if eval $LUA53_TEST_SRC > /dev/null 2>&1; then
	if [ ! -d "${LUA53_TEST_DIR}" ]; then
	    echo "** Source requires lua 5.3 but ${LUA53_TEST_DIR} doesn't exist."

	    local upgrade_script=$(echo $HOME/ZonamaDev/fasttrack/scripts/devsetup.d/*lua53)
	    local ret=255

	    if [ -f "$upgrade_script" ]; then
		echo
		echo "##########################################"
		echo "## AUTO-UPGRADING YOUR LUA TO LUA 5.3.x ##"
		echo "##########################################"
		echo
		(cd $HOME;$HOME/ZonamaDev/fasttrack/scripts/devsetup --force $(basename $upgrade_script))

		ret=$?
		if [ $ret -eq 0 ]; then
		    rm -f build/unix/config.log
		    extra='clean '
		fi
	    else
		ret=254
		echo "** Can't find lua53 upgrade script!?"
	    fi
	    
	    if [ $ret -ne 0 ]; then
		echo "** You need to manually upgrade Lua to 5.3.x before you can build the server codebase. (ERR=${ret}) **"
		return 12
	    fi
	fi
    fi

    if [ ! -f build/unix/config.log ]; then
        extra="${extra}config"
    fi

    if server_build_step $extra; then
        echo "** BUILD SUCCESS IN $SECONDS SECOND(S) **"
        return 0
    else
        echo "** BUILD FAILED **"
        return 11
    fi
}

reset_server_ip() {
    echo "** Re-running IP setup"
    server_stop
    zdcfg clear iplist
    zdcfg clear server_ip

    if [ -z "$DISPLAY" ]; then
	export DISPLAY=':0'
    fi

    ~/ZonamaDev/fasttrack/scripts/devsetup --force 01-iplist 31server-ip

    local server_ip=$(zdcfg get server_ip 2> /dev/null)

    if [ -n "${server_ip}" ]; then
	echo "** Server IP: ${server_ip}"
    else
	echo "** FAILED TO RESET server_ip"
    fi
}

server_update_ip() {
    local server_ip=$(zdcfg get server_ip 2> /dev/null)

    if [ -z "$server_ip" ]; then
	server_ip='127.0.0.1'
        local i2=$(netstat -ni|grep eth2)

        # If they have an eth2 they might have enabled the "public" interface
        if [ -n "$i2" ]; then
            # Find the default route
            read -a aa <<<$(ip -o route show|egrep '^default')
            # What's the address of the interface with default route?
            read -a aa <<<$(ip -o -4 addr show ${aa[4]})
            # Let's suggest that ip
            server_ip=$(echo ${aa[3]}|cut -d/ -f1)
        fi

	zdcfg set server_ip $server_ip
    fi

    echo "Server IP: $server_ip"

    if zdcfg check-flag disable_ipcheck; then
	echo '** Skipping ipcheck because flag disable_ipcheck is on **'
    else
	# Check if ip is valid
	read -a instance_query <<<$(curl -s -D - -A zonamaipscan --connect-timeout 5 -m 5 'http://127.0.0.1:'${OPENRESTY_PORT}'/zonama-instance-id?why=start' 2> /dev/null)

	if [ "${instance_query[1]}" != "200" ]; then
	    echo "** ERROR: Local zonama-instance-id service is not running on port ${OPENRESTY_PORT} as expected, giving up." >&2
	    exit 12
	fi

	local our_instance="${instance_query[${#instance_query[@]}-1]}"

	# If we can we should try and get ports forwarded before we test...
	if zdcfg check-flag enable_upnp && [ -x ${ZDHOME}/bin/upnp_add_ports ]; then
	    if [ -z "$(luarocks list 2> /dev/null | grep upnpclient)" ]; then
		echo "** Install upnpclient"
		sudo luarocks install upnpclient
	    fi
	    ${ZDHOME}/bin/upnp_add_ports
	fi

	# Try SSL first
	local scheme='https'
	local result=$(curl -s -A zonamaipscan --insecure --connect-timeout 5 -m 5 ${scheme}'://'${server_ip}':'${OPENRESTY_SSL_PORT}'/zonama-instance-id?why=start' 2>/dev/null)

	# If that fails fall back to HTTP
	if [ -z "$result" ]; then
	    scheme='http'
	    result=$(curl -s -A zonamaipscan --connect-timeout 5 -m 5 ${scheme}'://'${server_ip}':'${OPENRESTY_PORT}'/zonama-instance-id?why=start' 2>/dev/null)
	fi

	if [ "X$result" != "X$our_instance" ]; then
	    echo "** ERROR: server_ip (${scheme}://${server_ip}/) is not valid."
	    reset_server_ip
	    server_ip=$(zdcfg get server_ip 2> /dev/null)

	    if [ -z "${server_ip}" ]; then
		echo "** failed to reset server ip, please fix."
		exit 12
	    fi
	else
	    echo "** Verified server_ip against zonama-instance-id service"
	fi
    fi

    eval $(get_config --bash ZoneGalaxyID)

    mysql swgemu -ve "UPDATE galaxy SET address = '${server_ip}' WHERE galaxy_id = ${ZoneGalaxyID}";
    mysql swgemu -ve "UPDATE galaxy SET name = 'swgemudev' WHERE galaxy_id = ${ZoneGalaxyID} AND name = 'Core3'";
}

server_backup() {
    local autobackup=false
    local restartserver=false

    local user_tag=''

    while [ -n "$1" ]
    do
        if [ "X$1" = "X--auto" ]; then
            autobackup=true
            shift
        elif [ "X$1" = "X--tag" ]; then
            user_tag="-$2"
            shift; shift;
        fi
    done

    if server_status; then
        echo "** Server is running **"

        if $autobackup; then
            echo "** send info **"
            server_send "info"
            for i in 5 4 3 2
            do
                server_send "broadcast Server going down for backups in $i minutes"
                sleep 60
            done

            server_send "broadcast Server going down for backups in 1 minute, get somewhere safe!"
            sleep 60

            server_send "broadcast Server going down for backups, should be back up in 10 minutes, enjoy the ghost world..."

            echo "** send info **"
            server_send "info"

            echo "** stopping server **"
            server_stop
            restartserver=true
        else
            if yorn "Would you like to shutdown the server first?"; then
                server_stop
                restartserver=true
            else
                echo "** USER ABORTED BACKUP **"
                return 12
            fi
        fi
    fi

    # NOTE: not the most space efficent way to do it but will work as it's simple for people to understand the format

    mkdir -p ${BUDIR} 2> /dev/null && echo "** Created ${BUDIR} directory **"

    TMPDIR=$(mktemp -d ${BUDIR}/swgemu-backup-temp.XXXXXX)

    NOW=$(date +%s)

    STAMP=$(date -d@${NOW} '+%Y%m%d%H%M%S%Z')

    BUFILE=${BUDIR}/swgemu-backup-${STAMP}"${user_tag}".tar.gz
    BULOG=${BUDIR}/swgemu-backup-${STAMP}"${user_tag}".log

    local bustat=$(mktemp /tmp/swgemu-backup-status.XXXXXX)

    (
        trap 'st=$?;echo "$st" > "'"${bustat}"'";echo "** UNEXPECTED EXIT=$st, PARTIAL BACKUP LEFT IN ${TMPDIR} **"' 0

	echo 254 > "${bustat}"

        date

        mkdir -p "${TMPDIR}/bin"

        echo "** Backing up to ${BUFILE} **"

        set -xe

        mysqldump --opt swgemu > "${TMPDIR}/mysqldump.sql"

        cd "${RUN_DIR}"

        cp -rv databases log conf custom_scripts ${TMPDIR}/bin/

        # Copy anything that has been modified in scripts/* dir
        git ls-files -m scripts | while read fn
        do
            dir="${TMPDIR}/bin/"$(dirname $fn)
            [ -d "${dir}" ] || mkdir -p "${dir}"
            cp -v $fn ${dir}
        done

        if $autobackup; then
	    if [ -f core3 ]; then
		# Include bin in an autobackup
		cp -v core3 ${TMPDIR}/bin/
	    else
		echo "** WARNING: core3 missing, proceeding anyway."
	    fi
        fi

        cd ${TMPDIR}

        read sz dir <<< $(du -s --block-size=1 .)

        # TODO - Other useful metadata here?
        echo '{"backup_size_bytes":"'${sz}'","backup_date":"'$(date -d@${NOW})'","backup_isodate":"'$(date -d@${NOW} -Iseconds)'","backup_unixepoc":"'${NOW}'"}' > ${TMPDIR}/metadata.json

        tar cvzf ${BUFILE} metadata.json $(ls | grep -v metadata.json)

        rm -fr ${TMPDIR}

        set +xe

        trap - 0

        echo "** SUCCESS: Backup saved to ${BUFILE} **"

	echo 0 > "${bustat}"
    ) 2>&1 | tee "${BULOG}"

    local ret=$(<"${bustat}")

    rm -f "${bustat}"

    if [ $ret -ne 0 ]; then
	echo "** ERROR: Backup failed with status ${ret} **"
	return ${ret}
    fi

    if $restartserver; then
        server_start "--auto"
    fi

    return 0
}

server_backup_chooser()
{
    local choice=''
    cd ${BUDIR}

    options=( $(cd "${BUDIR}";ls -r *.tar.gz) )

    prompt="Please select a file:"

    PS3=$'\n'"$prompt "
    select choice in "${options[@]}" "Quit" ; do
        echo $choice
        exit
        #TODO return JSON for IS_API_CALL and yoda
    done
}

server_restore()
{
    last_bu=$(server_backup_chooser)

    if [ "${last_bu}" == "Quit" -o -z "${last_bu}" ]; then
        echo "** USER QUIT OR CANNOT LOCATE BACKUP FILE. EXITING **"
        return 13
    else
        local bu_filename=$(basename "${last_bu}")
    fi

    if server_status; then
        echo "** SERVER IS RUNNING **"

        if yorn "Would you like to shutdown the server first?"; then
            server_stop
            :
        else
            echo "** USER ABORTED RESTORE **"
            return 14
        fi
    fi

    if yorn "Would you like to restore "${bu_filename}"?"; then
        :
    else
        echo "** USER ABORTED RESTORE **"
        return 15
    fi

    server_backup --tag "pre_restore_backup" 

    echo "** RESTORING "${last_bu}" **"
    local restat=$(mktemp /tmp/swgemu-recovery-status.XXXXXX)

    (
        trap 'st=$?;echo "$st" > "'"${restat}"'";echo "** UNEXPECTED EXIT=$st, CANNOT RESTORE **"' 0

        echo 254 > "${restat}"

        set -e
        cd "${RUN_DIR}"
        rm -fr databases && mkdir databases

        cd "${RUN_DIR}/.."
        tar xvf "${BUDIR}/${last_bu}"

        mysql -e 'DROP DATABASE swgemu'
        mysql -e 'CREATE DATABASE swgemu'
        mysql swgemu < mysqldump.sql

        trap - 0

        echo 0 > "${restat}"
    )

    local ret=$(<"${restat}")

    rm -f "${restat}"

    if [[ $ret -ne 0 ]]; then
	    echo "** ERROR: Backup failed with status ${res} **"
	    return ${ret}
    fi

    echo "** BACKUP SUCCESSFULLY RESTORED **"
    cd $BUDIR

    if yorn "Would you like to restart the server?"; then
        echo "** STARTING SERVER **"
        server_start
    else
        echo "** SERVER IS STOPPED **"
    fi
}

server_rununittests()
{
    local filter='*'

    if [ -n "$1" ]; then
        filter="$1"
    fi

    (set -x; cd "${RUN_DIR}"; ./core3 runUnitTests --gtest_filter="${filter}")
}

show_version()
{
    pushd $(dirname ${BASH_SOURCE[0]}) > /dev/null
    local me=$(pwd -P)'/'$(basename ${BASH_SOURCE[0]})
    popd > /dev/null
    local tmp=$(mktemp /tmp/swgemu-version-temp.XXXXXX)

    # Hack to avoid prompting user for pw's so they just fail instantly if not setup
    # Nothing nicer until git 2.3 :-(
    local tmpssh=$(mktemp ~/.swgemu-ssh-temp.XXXXXX.tmp)
    echo 'ssh -oBatchMode=yes "$@"' > $tmpssh
    chmod 700 "${tmpssh}"
    export GIT_SSH="${tmpssh}"

    local git_remote=$(cd ${BUILD_DIR};git ls-remote origin refs/heads/unstable 2>> ${tmp} | cut -f1)
    local git_local=$(cd ${BUILD_DIR};git rev-parse refs/heads/unstable 2>> ${tmp})
    local zd_tag=$(cd ~/ZonamaDev;git describe --tag 2>> ${tmp})
    local me_md5=$(md5sum < $me|cut -d' ' -f1 2>&1)

    unset GIT_SSH
    rm -f "${tmpssh}"

    read name url junk <<< $(cd ${BUILD_DIR};git remote -v 2>>${tmp})

    local errors=$(tr '\r' ' ' <${tmp})

    rm -f "${tmp}"

    local json="{ "

        json="${json} "'"server_version":{"remote-'${name}'":"'${url}'","remote-git-tag":"'${git_remote}'","local-get-tag":"'${git_local}'","asof_isodate":"'$(date -Iseconds)'","swgemu-script":"'${me}'","swgemu-md5":"'${me_md5}'","zd-tag":"'${zd_tag}'","collection_errors":"'${errors}'"}'
        json="${json}, "'"box_buildinfo":'$(cat /.swgemudev.buildinfo.json /.swgemudev.builinfo.json 2> /dev/null)

    json="$json }"

    echo $json | python -m json.tool
}

post_debug()
{
    local title="$1"
    local desc="$2"
    local gori="$3"

    echo -e "**\n** Post Debug Message\n**"

    echo -e "** This will create a dump of numerous files and status information"
    
    echo -e "** and post them to the internet via a github gist or an issue.\n**"

    echo -e "** Attempts are made to make sure the post does not include sensitive"
    
    echo -e "** data but we cannot 100% guarantee that sensitive data won't be posted.\n**"

    echo -e "** If you're worried you can follow the prompt to post a [G]ist and"
    
    echo -e "** DO NOT LOGIN to GitHub so your gist will be 100% annonymous.\n**"

    echo -e "** By default if you do post a gist and login the gist is created as"
    
    echo -e "** private so you can review it before sharing.\n**"

    echo -e "** Most people will want to post an [I]ssue and login to github"
    
    echo -e "** to get immediate feedback and quicker support.\n**"

    if [ -z "$gori" ]; then
        read -p 'Post a [G]ist or an [I]ssue? ' gori
        echo
    fi

    if [ -z "$title" ]; then
        read -p "Title: " title
        echo
    fi

    if [ -z "$desc" ]; then
        read -p "One-line description of your problem: " desc
        echo
    fi

    local url=""

    case $gori in
        [Ii]* )
            type ghi > /dev/null 2>&1 || (set -x;sudo gem install ghi)

            if git config --get ghi.token; then
                :
            else
                echo "Please login to github to post an issue:"
                read -p "What is your github username? " ghuser

                if [ -z "$ghuser" ]; then
                    echo "** Can't post an issues without a github account, please try again with a gist or provide your github username."
                    echo "** ABORTED BY USER **"
                    return 2
                fi

                ghi config --auth $ghuser
            fi
            echo "** Posting Issue..."
            local issue=$(ghi open --label "type/automated-help" -m "$(post_debug_body)" -- lordkator/ZonamaDev 2>&1)
            echo "** Looking for issue id"
            local issue_num=$(echo "$issue"|sed -ne '1s!^#\([0-9][0-9]*\):.*!\1!p')

            if [ -n "$issue_num" ]; then
                echo "** Found issue #${issue_num}"
                url="${ZONAMADEV_URL}/issues/"${issue_num}
            else
                echo -e "WARNING: Unexpected output from ghi:\n\t${issue}\n\nGET HELP!"
            fi
            ;;
        * | [Gg]* )
            type gist > /dev/null 2>&1 || (set -x;sudo gem install gist)

            if [ ! -f ~/.gist ] && yorn "Would you like to use your github userid for this? "; then
                gist --login
            fi

            url=$(post_debug_body | gist -p -d "swgemu postdebug - ${title}" -f "ZonamaDev/post_debug-"$(date +%s)".md" 2>&1)
            ;;
    esac

    if [ -z "$url" ]; then
        echo "** WARNING: Something seems to have failed, look for clues in any errors above."
        return 1
    fi

    echo -e "\nShare this URL to get help: ${url}"

    if xset q > /dev/null 2>&1; then
        local browser=$( (for i in chromium google-chrome chromium-browser firefox; do type -P $i; done)|head -1)
        nohup $browser $url > /dev/null 2>&1 &
    fi

    return 0
}

post_debug_body() {
    # The output here will be included in the post as github flavored markdown content
    # Note: Can't be too long as it goes into the command line with ghi and thus is limited
    #       see: xargs --show-limits < /dev/null
    #
    local debug_commands=(
        "show_version"
        "tail -5 ${WORKSPACE}/Initial_Core3_Build.log"
        "get_config --bash 'Zone..'"
        "get_config --bash 'Tre..'"
        "tre_check"
        "tail -100 ${WORKSPACE}/Core3/MMOCoreORB/bin/screenlog.0"
        "tail -100 ${WORKSPACE}/Core3/MMOCoreORB/bin/log/core3.log"
        "tail -25 ${OPENRESTY_DIR}/nginx/logs/error.log"
	"/sbin/ifconfig -a"
	"mysql swgemu -tve 'select galaxy_id,name,address,port,pingport,population from galaxy'"
	"zdcfg dump-flags"
	"zdcfg get-all"
        "uname -a"
        "df -h"
	"nproc"
        "top -Hbn 1"
    )

    exec 2>&1
    echo -e "swgemu postdebug - ${title}\n\nZonamaDev Automated Post\n\n"
    date
    echo -e "\nDescription: ${desc}\n\n"

    # Make sure commands don't try and use X windows
    local old_display="$DISPLAY"
    unset DISPLAY

    # Commands to run and capture ouput
    for cmd in "${debug_commands[@]}"
    do
        echo -e '\n---\n'"${cmd}"'\n```\n'
        eval $cmd
	echo -e '\n```'
    done

    if [ -n "$old_display" ]; then
        export DISPLAY="${old_display}"
    fi
}

server_latest()
{
    if server_status; then
        echo "** Server is running **"

        if yorn "Would you like to shut it down?"; then
            if server_stop; then
                :
            else
                echo "** server stop error=$? **"
                return 15
            fi
        else
            echo "** USER ABORTED **"
            return 16
        fi
    fi

    (
        set -xe
        cd "${BUILD_DIR}"
        git rm -f --ignore-unmatch build/unix/Makefile build/unix/config.h build/unix/config.status || true
        git checkout HEAD -- Makefile.in aclocal.m4 config.h.in configure src/client/Makefile.in src/client/aclocal.m4 src/client/config.h.in src/client/configure build/unix || true
        local have_changes=$(git status --porcelain --untracked-files=no | wc -l)
        if [ $have_changes -gt 0 ]; then
            git stash save "swgemu-latest $(date)"
            git pull
            git stash pop
        else
            git pull
        fi
        cd "${WORKSPACE}/PublicEngine"
        git pull
	rm -f "${BUILD_DIR}/build/unix/config.log"
    )

    local ret=$?

    if [ $ret -gt 0 ]; then
        echo "** Latest pull failed, look at errors above for clues. **"
        return 17
    fi

    return $ret
}

is_setup_pending() {
    if zdcfg check-flag 'devsetup/__full_run.status'; then
        return 1
    fi

    echo '
         ######      #     #     #   #####   #######  ######
         #     #    # #    ##    #  #     #  #        #     #
         #     #   #   #   # #   #  #        #        #     #
         #     #  #     #  #  #  #  #  ####  #####    ######
         #     #  #######  #   # #  #     #  #        #   #
         #     #  #     #  #    ##  #     #  #        #    #
         ######   #     #  #     #   #####   #######  #     #


    "TOO SOON!
       YOU HAVE AWAKENED ME TOO SOON, EXECUTUS!
         WHAT IS THE MEANING OF THIS INTRUSION?"

     If you continue without completing the devsetup process you will most
     likely have numerous problems.  Please follow all the prompts, if you
     stopped the process you can reboot to start again.

    '

    # Allow these to get through in case they have problems with setup
    if [ "$1" = "postdebug" ]; then
        return 1
    fi

    return 0
}

yorn() {
  if $IS_API_CALL; then
      echo -n -e "$@ N"
      return 1
  fi

  if tty -s; then
      echo -n -e "$@ Y\b" > /dev/tty
      read yorn < /dev/tty
      case $yorn in
        [Nn]* ) return 1;;
      esac
  fi

  return 0
}

release_lock() {
    if $HAVELOCK; then
        rm -f ${SWGEMU_LOCKFILE}
    fi
}

get_lock() {
    ## Run LOCK
    export HAVELOCK=false
    local locktmp=$(mktemp /tmp/swgemu.lock-XXXXXX)
    export SWGEMU_LOCKFILE=/tmp/swgemu.lock

    echo "$$ "$(date +%s) > ${locktmp}

    if ln ${locktmp} ${SWGEMU_LOCKFILE} 2> /dev/null; then
        rm -f ${locktmp}
        export HAVELOCK=true
    else
        read pid tm_lock < ${SWGEMU_LOCKFILE}
        tm_now=$(date +%s)

        let "tm_delta=${tm_now} - ${tm_lock}"

        if kill -0 $pid; then
            echo -e ">> PID $pid HAS HAD LOCK FOR ${tm_delta} SECOND(S) RUNNING:\n\n\t"$(ps -p $pid -ho cmd)"\n\nAborting, can't continue until other command is done."
            return 1
        else
            echo ">> Stealing lock from PID $pid which has gone away, locked ${tm_delta} second(s) ago"
            if ln -f ${locktmp} ${SWGEMU_LOCKFILE}; then
                rm -f ${locktmp}
                read pid tm_lock < ${SWGEMU_LOCKFILE}
                if [ "$pid" -eq "$$" ]; then
                    echo ">> STOLE LOCK, PROCEEDING"
                else
                    echo ">> Can't steal lock, somone got in before us!? pid=${pid}"
                    return 2
                fi
            else
                rm -f ${locktmp}
                echo ">> Failed to steal lock, **ABORT**"
                return 1
            fi
        fi
    fi

    export HAVELOCK=true
    trap 'release_lock;' 0
}

if [ "X$1" == "X--api" ]; then
    IS_API_CALL=true
    exec 2>&1
    shift
    tmp=$1
    shift
    set -- $tmp --auto $*
    export PATH=${ZDHOME}/bin:/usr/local/bin:/usr/bin:/bin
fi

if [ "X$1" == "X--panel" ]; then
    IS_PANEL=true
    shift

    if [ -n "$DISPLAY" ] && xset q > /dev/null 2>&1; then
        HAVEX=true

        if ! zdcfg check-flag disable_yoda_panel_buttons && [ -f ~/ZonamaDev/common/global.config ]; then
            source ~/ZonamaDev/common/global.config

            url='http://127.0.0.1:'${OPENRESTY_PORT}'/'

            # Check for yoda API
            r=$(curl -s -k "${url}/api/status/")

            if echo $r | python -m json.tool > /dev/null 2>&1; then
                if [ -n "$BROWSER" ]; then
                    xdotool windowminimize $(xdotool search --onlyvisible --pid=$PPID --limit 1)
                    url="${url}#/control?cmd="$(python -c "import urllib;print(urllib.quote('''$*'''))")
                    echo ">> Launching Yoda: ${BROWSER} ${url}"
                    setsid "${BROWSER}" "${url}" &
                    sleep 2
                    exit 0
                fi
            fi
        fi
    fi
fi

# Cron and API calls won't have TERM set
if [ -z "$TERM" ]; then
    TERM=dumb
fi

export TERM

main "$@"

ret=$?

echo

if $IS_PANEL; then
    if [ $ret -eq 0 ]; then
        echo -e $(tput setaf 2)"\n** SUCCESS **\n"$(tput sgr0)
    else
        echo -e $(tput setab 3;tput setaf 0)"\nWARNING: ${cmd} command returned error code ${ret}\n"$(tput sgr0)
    fi

    read -p "Press <ENTER> to close the window: "
fi

exit $ret
