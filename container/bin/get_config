#!/usr/local/bin/lua
--[[
--
-- get_config - Parse lua config.lua, search for items and print
--
-- Author: Lord Kator <lordkator@swgemu.com>
--
-- Created: Wed Dec 30 18:06:08 UTC 2015
--
]]

config_path = ""

function main()
  paths = { ".", "conf", "bin/conf", os.getenv("HOME") .. "/workspace/Core3/MMOCoreORB/bin/conf" }

  for _, dir in pairs(paths) do
    local p = dir .. "/config.lua"
    local f = io.open(p)
    if f then
      config_path = p
      f:close()
      break
    end
  end

  if config_path == "" then
    io.stderr:write(arg[0] .. ": Can't find config.lua\n");
    os.exit(2)
  end

  c = load_config(config_path)

  selected = { }
  formatter = tprint

  if arg[1] == "--bash" then
    formatter = bash
    table.remove(arg, 1)
  end

  needle = arg[1] or "."

  for k,v in pairs(c) do
    if string.match(k, needle) then
      selected[k] = v
    end
  end

  formatter(selected)
end

if not setfenv then -- Lua 5.2+
  -- based on http://lua-users.org/lists/lua-l/2010-06/msg00314.html
  -- this assumes f is a function
  local function findenv(f)
    local level = 1
    repeat
      local name, value = debug.getupvalue(f, level)
      if name == '_ENV' then return level, value end
      level = level + 1
    until name == nil
    return nil end
  getfenv = function (f) return(select(2, findenv(f)) or _G) end
  setfenv = function (f, t)
    local level = findenv(f)
    if level then debug.setupvalue(f, level, t) end
    return f end
end

function load_config(path)
    local config = setmetatable({}, {__index=_G})
    assert(pcall(setfenv(assert(loadfile(path)), config)))
    setmetatable(config, nil)
    return config
end

-- https://gist.github.com/ripter/4270799 
-- Print contents of `tbl`, with indentation.
-- `indent` sets the initial level of indentation.
function tprint (tbl, indent)
  if not indent then indent = 0 end
  for k, v in pairs(tbl) do
    formatting = string.rep("  ", indent) .. k .. ": "
    if type(v) == "table" then
      print(formatting)
      tprint(v, indent+1)
    elseif type(v) == 'boolean' then
      print(formatting .. tostring(v))		
    else
      print(formatting .. v)
    end
  end
end

function bash_esc(str)
  s = string.gsub(str or "nil", "'", "'\"'\"'")
  return s
end

-- Bash doesn't support nested tables for we won't even try
function bash(tbl)
  io.write("CFGPATH='" .. bash_esc(config_path) .. "';\n")
  for k, v in pairs(tbl) do
      if type(v) == "table" then
	  io.write("declare -A " .. k .. ";\n")
	  for k2, v2 in pairs(v) do
	      if type(v2) == "table" then
		  io.stderr:write("WARNING Config Var [" .. v .. "." .. v2 .. "] is a nested table!")
	      else
		  io.write(string.format("%s['%s']='%s';\n", bash_esc(k), bash_esc(k2), bash_esc(v2)))
	      end
	  end
      else
	  io.write(string.format("%s='%s';\n", k, bash_esc(v)))
      end
  end
end

main()

-- :vi set ft=lua sw=2
